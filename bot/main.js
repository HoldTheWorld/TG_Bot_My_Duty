import TelegramBot from 'node-telegram-bot-api'
import * as dotenv from 'dotenv'
dotenv.config()
const token = process.env.BOT_TOKEN
const bot = new TelegramBot(token, {polling: true});
import { req_get_User, req_reg_User, req_get_Duties, req_add_Duty, req_del_Duty, req_add_Timing, req_fin_Timing, req_getOne_Duty, req_check_Active, req_get_One_Timing, upd_timeZone } from "./reqFunctions.js"
import { getDutyMenu, getOneStat, getStatMenu, getTimeString, getUserTime, getTimeZone  } from './helpFunctions.js'

let keyboardStart = [
  [
    {
      id: 'dutyList',
      text: '–ú–æ–∏ –∑–∞–¥–∞—á–∏', 
      callback_data: 'dutyList' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
    }
  ],
  [
    {
      id: 'addDuty',
      text: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
      callback_data: 'addDuty'
    }
  ],
  [
    {
      id: 'sttDuty',
      text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
      callback_data: 'sttDuty',
    }
  ],
];

bot.setMyCommands([
  {command: '/start' , description: '—Å—Ç–∞—Ä—Ç'},
  {command: '/menu' , description: '–º–µ–Ω—é'},
])

bot.on('text', async (msg) => {
  let text = msg.text
  let chatId = msg.chat.id
  let userTdId = msg.chat.username
  let checkUser
  let message = ''
  let keyBoard = [[]]

  checkUser = await req_get_User(userTdId)
  if (checkUser.isOk) {
    if (!checkUser.user.length) {
      let regResult = await req_reg_User(userTdId)
        if (regResult.isOk /*&& regResult.isNew*/) {
          message += `
          üöÄ –í–≤–µ–¥–∏ /start –∏–ª–∏ /menu, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É. 
          üöÄ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–≤–µ–¥–∏: –Ø –±—É–¥—É {–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏}.
          ‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π: –±–æ—Ç—É –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–≤–æ—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞, –ø–æ—ç—Ç–æ–º—É —Ç—ã –ø—Ä–æ—Å—Ç–æ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏—Ö –≥–æ—Ä–æ–¥, –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ —Ç–æ–º –∂–µ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, —á—Ç–æ –∏ —Ç—ã. 
          –¢—ã –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –Ω–æ –≤—Å–µ —Ä–∞–Ω–µ–µ —É—á—Ç–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã. 
          –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:
          –Ω–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ  üö©- –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ üìç.
          –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞ –∑–æ–Ω–∞ –≤ –ú–æ—Å–∫–≤–µ (+3 —á–∞—Å–∞ UTC).`
          keyBoard = keyboardStart
        } else {
          message = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'
          // keyboardStart = []
        }
    } else {
      if (text == '/start' || text == '/menu') {
        message = `–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ, ${userTdId}?`
        keyBoard = keyboardStart
      } else if (text.toLowerCase().indexOf('—è –±—É–¥—É') == 0 && checkUser.user.length) {
          if (!msg.text.slice(7).trim().length) {
          message = '–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ù–ï –ø—É—Å—Ç–æ–µ.'
          } else {
            let newDuty = await req_add_Duty(userTdId, checkUser.user[0].id, msg.text.slice(7))
            if (newDuty.isOk) {
              message = `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É "${newDuty.duty.duty_name}"`
              keyBoard = keyboardStart
            } else {
              message = '–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
              keyBoard = keyboardStart
            }
          }
      } else if (msg.text.toLowerCase().indexOf('—è –±—É–¥—É') > 0 && checkUser.user.length ) {
          message = '–ù–∞—á–Ω–∏ —Å–æ —Å–ª–æ–≤ "–Ø –±—É–¥—É" '
      } else {
        message =  '—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?'
        keyBoard = keyboardStart
      } // end text treatment
    } // end check + text treatment
  } else {
    message = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'
  } // end server check

  bot.sendMessage(chatId, message, { 
    reply_markup: {
    inline_keyboard: keyBoard
    }});
}) // end ON 

  // bot.on('text', async (msg) => {
  //   let text = msg.text
  //   let chatId = msg.chat.id
  //   let userTdId = msg.chat.username
  //   let checkUser
  //   let message = ''
  //   let keyBoard = [[]]
  //   try {
  //     checkUser = await req_get_User(userTdId)
  //   } catch (err) {
  //       console.log(" ERROR==>" + err);
  //   }

    // if (text == '/start' || text == '/menu') {
    //   console.log(userTdId);
    //   // bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç!');
    //   let checkUser = await req_get_User(userTdId)
    //   if (!checkUser.length) {
    //     message = '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ /register'
    //     // return bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ /register');
    //   } else if (checkUser.length && checkUser[0].user_tg_id == userTdId) {
    //     message = `–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ, ${userTdId}?`
    //     keyBoard = keyboardStart
    //     // return bot.sendMessage(chatId, `–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ, ${userTdId}?`, { 
    //     //   reply_markup: {
    //     //   inline_keyboard: keyboardStart
    //     // }});
    //   }
      
    // } else if (text == '/register') {
    //   if (!checkUser.length) {
    //     let regResult = await req_reg_User(userTdId)
    //     if (regResult) {
    //       message = `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n`;
    //       message += `
    //       üöÄ –í–≤–µ–¥–∏ /start –∏–ª–∏ /menu, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É. 
    //       üöÄ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–≤–µ–¥–∏: –Ø –±—É–¥—É {–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏}.
    //       ‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π: –±–æ—Ç—É –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–≤–æ—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞, –ø–æ—ç—Ç–æ–º—É —Ç—ã –ø—Ä–æ—Å—Ç–æ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏—Ö –≥–æ—Ä–æ–¥, –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ —Ç–æ–º –∂–µ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, —á—Ç–æ –∏ —Ç—ã. 
    //       –¢—ã –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –Ω–æ –≤—Å–µ —Ä–∞–Ω–µ–µ —É—á—Ç–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã. 
    //       –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:
    //       –Ω–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ  üö©- –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ üìç.
    //       –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞ –∑–æ–Ω–∞ –≤ –ú–æ—Å–∫–≤–µ (+3 —á–∞—Å–∞ UTC).`
    //       // keyBoard = keyboardStart
    //     } else {
    //       message = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
    //       // keyboardStart = []
    //     }
    //   } else if (checkUser.length && checkUser[0].user_tg_id == userTdId) {
    //     message = '–≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'; 
    //     keyBoard = keyboardStart
    //   } else {
    //     message = '—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?';
    //     // keyboardStart = []
    //   }
  
    //   // return bot.sendMessage(chatId, message, { 
    //   //   reply_markup: {
    //   //   inline_keyboard: keyboardStart
    //   //   }});
    // }  else if (text.toLowerCase().indexOf('—è –±—É–¥—É') == 0 && checkUser.length) {
      
    //   if (!msg.text.slice(7).trim().length) {
    //   message = '–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ù–ï –ø—É—Å—Ç–æ–µ.'
    //   } else {
    //     let newDuty = await req_add_Duty(userTdId, checkUser[0].id, msg.text.slice(7))
    //     if (newDuty) {
    //       message = `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É "${newDuty.duty_name}"`
    //       keyBoard = keyboardStart
    //     } else {
    //       message = '–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
    //       keyBoard = keyboardStart
    //     }
    //   }
    //   // bot.sendMessage(chatId, message, { 
    //   //   reply_markup: {
    //   //   inline_keyboard: keyboardStart
    //   //   }})
    // } else if (msg.text.toLowerCase().indexOf('—è –±—É–¥—É') > 0 && checkUser.length ) {
    //   message = '–ù–∞—á–Ω–∏ —Å–æ —Å–ª–æ–≤ "–Ø –±—É–¥—É" '
    //   // bot.sendMessage(chatId, '–ù–∞—á–Ω–∏ —Å–æ —Å–ª–æ–≤ "–Ø –±—É–¥—É" ')
    // } else {
    //   message =  '—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?'
    //   keyBoard = keyboardStart
    //   // bot.sendMessage(chatId, '—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', { 
    //   //   reply_markup: {
    //   //   inline_keyboard: keyboardStart
    //   //   }})
    // } 
  //   bot.sendMessage(chatId, message, { 
  //     reply_markup: {
  //     inline_keyboard: keyBoard
  //     }});
  // });

bot.on('location', async (query) => {
  const userTdId = query.chat.username
  const chatId = query.chat.id;
  let message = ''
  let keyBoard = [[]]
  let checkUser
  checkUser = await req_get_User(userTdId)
  if (checkUser.user.length && checkUser.user[0].user_tg_id == userTdId)  {
    let {timeZone, temp} = await getTimeZone(query.location.latitude, query.location.longitude)
    let updResult = await upd_timeZone(query.chat.username, timeZone)
    if (updResult.isOk && updResult.updated == 1 ) {
      message = `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: "UTC/GMT ${timeZone/3600} hours"`
    } else {
      message = '—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'
    }
  } else {
    message = '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ /start'
  }
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: keyBoard
    }
  })
})  

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  let userTdId = query.message.chat.username
  let message = ''
  let timeZoneMs
  let keyboardDuties = [[]]
  let checkUser

  checkUser = await req_get_User(userTdId)

  if (checkUser.isOk && checkUser.user[0].user_tg_id == userTdId) {
      timeZoneMs = checkUser.user[0].time_zone * 1000
      // —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á 
      if (query.data === 'dutyList') { 
        let dutyList = await req_get_Duties(userTdId, checkUser.user[0].id)
        if (dutyList.isOk && dutyList.duties.length) {
          message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É'
          dutyList.duties.forEach(el => {
            keyboardDuties.push([{
              id: `${el.id}+${el.duty_name}`,
              text: el.duty_name,
              callback_data: `chosen:${el.id}`
            }])
          });
        } else {
          message = '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤–∏–º?'
          keyboardDuties = [
            [{
              id: 'addDuty',
              text: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
              callback_data: 'addDuty'
            }]
          ]
        }
        bot.sendMessage(chatId, message, {
          reply_markup: {
            inline_keyboard: keyboardDuties
          }
        })
        await bot.answerCallbackQuery(query.id, {
          show_alert: false,
          cache_time: 3600
        })
      }
      // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
      if (query.data === 'addDuty') { 
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–æ —Å–ª–æ–≤ "–Ø –±—É–¥—É", –Ω–∞–ø—Ä–∏–º–µ—Ä "–Ø –±—É–¥—É –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ"')
       
        await bot.answerCallbackQuery(query.id, {
          show_alert: false,
          cache_time: 3600
          })
      }
      // –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ 
      if (query.data.indexOf('chosen', 0) == 0) {
        let keyboardDutiesActions = await getDutyMenu(query.data.slice(7))
        bot.sendMessage(chatId, `—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`, {
          reply_markup: {
            inline_keyboard: keyboardDutiesActions
          }
        })
        await bot.answerCallbackQuery(query.id, {
          show_alert: false,
          cache_time: 3600
        })
      }
      // —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 
      if (query.data.indexOf('delDuty',0) == 0) {
        let response = await req_del_Duty(Number(query.data.slice(7)))
        if (response) {
          message = '–ó–∞–¥–∞—á–∞ –±–µ—Å—Å–ª–µ–¥–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
        } else {
          message = '—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
          keyboardStart = []
        }
        bot.sendMessage(chatId, message, { 
          reply_markup: {
          inline_keyboard: keyboardStart
          }})
        await bot.answerCallbackQuery(query.id, {
          show_alert: false,
          cache_time: 3600
        })
      }
      // –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 
      if (query.data.indexOf('strDuty',0) == 0) {
        let message = ''
        let keyBoard = []
        let responseCheck = await req_check_Active(checkUser.user[0].id)
        if (!responseCheck.active.length) {
          let date = Date.now() + timeZoneMs
          let result = await req_add_Timing(Number(query.data.slice(7)), date)
          let thisDuty = await req_getOne_Duty(Number(query.data.slice(7)))
          if (thisDuty.isOk && result.isOk ) {
            if (thisDuty.duty.length) {
              message = `–í—ã –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${thisDuty.duty[0].duty_name}": ${getUserTime(date)} `
            } else {
              message = '—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
            }
          } else {
            message = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'
          }
          keyBoard = await getDutyMenu(query.data.slice(7))
        } else {
          let {hours, minutes} =  getTimeString((Date.now() + timeZoneMs - responseCheck.active[0].dutystart))
          message = `
          —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞—á—É "${responseCheck.active[0].dutyname}", –Ω–∞—á–∞—Ç—É—é ${hours} —á–∞—Å(-–æ–≤) ${minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          `
          keyBoard = await getDutyMenu(responseCheck.active[0].dutyid.toString())
        }
        bot.sendMessage(chatId, message, { 
          reply_markup: {
          inline_keyboard: keyBoard
          }})

        await bot.answerCallbackQuery(query.id, {
            show_alert: false,
            cache_time: 3600
          })
      }
      // –∑–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–¥–∞—á—É
      if (query.data.indexOf('finDuty',0) == 0) {
        let message = ''
        let keyBoard = []
        let date = Date.now() + timeZoneMs
        const activeDuties = await req_check_Active(checkUser.user[0].id)
        if (!activeDuties.active.length) {
          message = '—É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á'
          keyBoard = await getDutyMenu(query.data.slice(7))
        } else {
          if (activeDuties.active[0].dutyid ==  Number(query.data.slice(7))) {

            let result = await req_fin_Timing(activeDuties.active[0].timingid, date)
            if (result.isOk) {
              message = `
              –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${activeDuties.active[0].dutyname}"  ${getUserTime(date)}
              `
              } else {
                message = '—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
            }
            keyBoard = keyboardStart
          } else {
            message = `—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${activeDuties.active[0].dutyname}"`
            keyBoard = await getDutyMenu(activeDuties.active[0].dutyid.toString())
          }
        }
        bot.sendMessage(chatId, message, { 
          reply_markup: {
          inline_keyboard: keyBoard
          }})
        await bot.answerCallbackQuery(query.id, {
            show_alert: false,
            cache_time: 3600
          })
      }
      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ 
      if (query.data.indexOf('sttDuty',0) == 0) {

        let keyBoardStat = getStatMenu(query.data.slice(7))
        bot.sendMessage(chatId, '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥?', { 
          reply_markup: {
          inline_keyboard: keyBoardStat
          }})
        await bot.answerCallbackQuery(query.id, {
          show_alert: false,
          cache_time: 3600
          })
      }
      if (query.data.indexOf('stat', 0) == 0) {
        let message = await getOneStat(checkUser.user[0].id, query.data.slice(4,5))
        bot.sendMessage(chatId, message )
        await bot.answerCallbackQuery(query.id, {
          show_alert: false,
          cache_time: 3600        })
      }
    }
  });
  
bot.on("polling_error", console.log);

  
